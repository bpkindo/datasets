TRUE ~ 0)
data.frame( cat_predictor), weights =
cat_predictor =  sample(c('A','B','C'), n, replace = TRUE)
data.frame( cat_predictor), weights =
data.frame( cat_predictor, weights =
case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) )
continous_predictor = runif(n)
continous_predictor
cat_predictor =  sample(c('A','B','C'), n, replace = TRUE)
continous_predictor = runif(n)
y = case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) + continous_predictor * 2.3
X = data.frame(x1 = continous_predictor, x2 = as.factor(cat_predictor))
head(X)
y[1:10]
hist(y)
library(dplyr)
set.seed(5646)
n = 100
cat_predictor =  sample(c('A','B','C'), n, replace = TRUE)
continous_predictor = runif(n)
y = case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) + continous_predictor * 2.3
X = data.frame(
x1 = continous_predictor,
x2 = as.factor(cat_predictor),
x3 = runif(n))
head(X)
hist(y)
remove.packages("BART")
install.packages("BART")
library(BART)
library(dplyr)
help(BART)
help(BART)
library(BART)
help(BART)
bartFit = wbart(X,y,nskip=500,ndpost=5000)
bartFit$varprob.mean
bartFit$varcount
bartFit$varprob.mean
bartFit = wbart(X,y,nskip=500,ndpost=5000, sparse = TRUE)
bartFit$varprob
length(bartFit$varprob)
dim(bartFit$varprob)
bartFit = rbart(X,y,nskip=500,ndpost=1000, sparse = TRUE)
bartFit = bart(X,y,nskip=500,ndpost=1000, sparse = TRUE)
bartFit = gbart(X,y,nskip=500,ndpost=1000, sparse = TRUE)
bartFit$varprob.mean
bartFit$varprob.mean
sum(bartFit$varprob.mean)
varprob.mean[2:4]
bartFit$varprob.mean[2:4]
sum(bartFit$varprob.mean[2:4])
effect_of_cat_predictor/y + effect_of_continous_predictor/y
effect_of_cat_predictor = case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0)
effect_of_continous_predictor = continous_predictor * 2.3
effect_of_cat_predictor/y + effect_of_continous_predictor/y
rnorm(n, mean = 0, sd = 2)
y = rnorm(n, mean = 0, sd = 0.5) + case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) + continous_predictor * 2.3
y
x3 = runif(n)
y = rnorm(n, mean = 0, sd = 0.5) + case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) + continous_predictor * 2.3
X = data.frame(
x1 = continous_predictor,
x2 = as.factor(cat_predictor),
x3 = x3)
### True contribution of each predictor
##### Average effect over serveral simulations
##### Percent of variabilit in Y explained by each predictor
effect_of_cat_predictor = case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0)
effect_of_continous_predictor = continous_predictor * 2.3
effect_of_cat_predictor/y + effect_of_continous_predictor/y
mean(effect_of_cat_predictor/y + effect_of_continous_predictor/y)
hist(effect_of_cat_predictor/y + effect_of_continous_predictor/y)
x3 = runif(n)
y = rnorm(n, mean = 0, sd = 0.5) + case_when(cat_predictor == 'A' ~ 0.25,
cat_predictor == 'B' ~ 0.1,
TRUE ~ 0) + continous_predictor * 2.3
X = data.frame(
x1 = continous_predictor,
x2 = as.factor(cat_predictor),
x3 = x3)
mean(effect_of_cat_predictor)
mean(effect_of_continous_predictor)
mean(y)
mean(effect_of_continous_predictor)
mean(effect_of_cat_predictor)
mean(effect_of_cat_predictor)/mean(y)
mean(effect_of_continous_predictor)/mean(y)
hist(y)
bartFit = gbart(X,y,nskip=500,ndpost=1000, sparse = TRUE)
bartFit$varprob.mean
bartFit$varprob.mean
mean(effect_of_cat_predictor)/mean(y)
3000*80
3000*90
3000*100
215.64/3
215.64/(12*3)
72/24
8*60
remove.packages("mpbart")
library(devtools)
devtools::install_github("https://github.com/bpkindo/mpbart.git")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("https://github.com/bpkindo/mpbart")
devtools::install("C:\Users\bpkin\OneDrive\Documents\GitHub\mpbart")
devtools::install("C:/Users/bpkin/OneDrive/Documents/GitHub/mpbart")
devtools::install("C:/Users/bpkin/OneDrive/Documents/GitHub/mpbart")
devtools::install("C:/Users/bpkin/OneDrive/Documents/GitHub/mpbart")
remove.packages("mpbart")
devtools::install_github("https://github.com/bpkindo/mpbart")
data
data()
?diabetes
?diabetes
df <- read.table('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv')
df <- read.table('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv',
sep= '\t')
help(read.table)
df <- read.delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv')
head(df)
df <- read.delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv', header = False)
df <- read.delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv', header = FALSE)
head(df)
library(dplyr)
df %>% select(V1, V2) %>% head()
df %>% select(V2, V3) %>% head()
df %>% select(file_name = V2,transcription = V3) %>% head()
df <- read.delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv', header = FALSE) %>%
select(file_name = V2,transcription = V3)
df  %>% head()
df  %>% select(file_name) %>%  head()
df  %>% select(file_name) %>%  head()
df <- read.delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv', header = FALSE) %>%
select(V1, file_name = V2,transcription = V3)
df %>% head()
getwd()
write.csv(df,"train_google_fleurs.csv", row.names = FALSE)
df %>% filter(V1 == 34)
df %>% filter(V1 == 30)
library(readr)
df <- readr::read_delim('C:/Users/bpkin/OneDrive/Documents/whisper/data/google-fleurs/train.tsv')
problems()
15000*(30-5)
350000/100
0.15*350000/100
1142.87 *2 + 1342.87*2
1+3+5+7+9
2+4+6+8+10
1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30
1+6+22+4+10
1+6
7+22
29+4
3+10+6+5
20+1
1+32+77
13*2*2
13*2*2*60
set.seed(123)
n = 1000;
loc=0;  scale=1;
data1=rlogis(n,loc,scale)
set.seed(123)
n = 100000;
loc=0;  scale=1;
data1=rlogis(n,loc,scale)
maxx = 10
x=seq(from=-maxx,to=maxx,by=0.01)
#### AR Simulations
n = 100000;
alpha=0.5; mu=0; sigma=1;
#alpha=3; mu=0; sigma=1;
f = (alpha^(1+exp(-(x-mu)/sigma))^(-1)*log(alpha)*exp(-(x-mu)/sigma))/((alpha-1)*sigma*(1+exp(-(x-mu)/sigma))^(2))
g = (exp(-(x-mu)/sigma))/(sigma*(1+exp(-(x-mu)/sigma))^(2))
r = f/g
M =20; # from graph of r, take M = 20
X_sim = array(NA,n);
for (i in 1:n) {
y = rlogis(1,0,1) #proposed y from logistic dist g(y)
u = runif(1,0,1);
fy = (alpha^(1+exp(-(y-mu)/sigma))^(-1)*log(alpha)*exp(-(y-mu)/sigma))/((alpha-1)*sigma*(1+exp(-(y-mu)/sigma))^(2))
gy = (exp(-(y-mu)/sigma))/(sigma*(1+exp(-(y-mu)/sigma))^(2))
r = fy/gy
if ( u <= (1/M)*r )
X_sim[i] = y; #accept y otherwise go to step 1
}
hist(x)
hist(X_sim)
pdf_logis<- function(par, x) {
sigma <- par[1]
mu <- par[2]
exp(-(x-mu)/sigma)/sigma*(1+exp(-(x-mu)/sigma))^2
}
cdf_logis <- function(par, x) {
sigma <- par[1]
mu <- par[2]
1/1+exp(-(x-mu)/sigma)
}
pdf_APTL <- function(par, y) {
alpha <- par[1]
sigma <- par[2]
mu <- par[3]
(alpha^(1+exp(-(y-mu)/sigma))^(-1)*log(alpha)*exp(-(y-mu)/sigma))/((alpha-1)*sigma*(1+exp(-(y-mu)/sigma))^(2))
}
cdf_APTL <- function(par, y) {
alpha <- par[1]
sigma <- par[2]
mu <- par[3]
(alpha^(1+exp(-(y-mu)/sigma))^(-1)-1)/(alpha-1)
}
data("carbone")
set.seed(345)
carbone
data(carbon)
dataset()
datasets()
data()
fit1 = goodness.fit(pdf = pdf_logis, cdf = X_sim,
starts = c(1,0), data = carbone,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
library(Adequacy)
install.packages("Adequacy")
library(AdequacyModel)
fit1 = goodness.fit(pdf = pdf_logis, cdf = X_sim,
starts = c(1,0), data = carbone,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = X_sim,
starts = c(1,0), data = carbone,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
help(goodness.fit)
data(carbone)
head(carbone)
X_sim
X_sim
hist(X_sim)
lengt(X_sim)
length(X_sim)
sum(is.null(X_sim))
sum(na(X_sim))
sum(is.na(X_sim))
x_sim_nonmissing = X_sim[!is.na(X_sim)]
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = x_sim_nonmissing,
starts = c(1,0), data = carbone,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis(),
starts = c(1,0), data = x_sim_nonmissing,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1,0), data = x_sim_nonmissing,
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
help("rlogis")
rlogis(10)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1,0), data = rlogis(10),
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
cdf_logis <- function(par, x) {
sigma <- par[1]
mu <- par[2]
1/(1+exp(-(x-mu)/sigma))
}
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1,0), data = rlogis(10),
method = "PSO",domain = c(-maxx,maxx),mle = NULL, lim_inf = c(0,0),lim_sup = c(2,2), S = 250, prop=0.1, N=50)
1==1 & 7==2
pdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
pdf <- 0
if((alpha > 0) & (alpha != 1)){
pdf <- (log(alpha)/(alpha - 1)) * dlogis(x,loc,sc) * alpha ^plogis(x,loc,sc)
} else if (alpha == 1){
pdf = dlogis(x,loc,sc)
}
pdf
}
pdf_logis(c(1.2,0,0), c(2,2,-1))
dlogis(c(2,1,-2))
dlogis(c(2,1,-2),0,1)
pdf_logis(c(1.2,0,1), c(2,2,-1))
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1.0,0,1), data = rlogis(10),
method = "PSO",
domain = c(-maxx,maxx),
mle = NULL, lim_inf = c(0,0,0),
lim_sup = c(2,2,2),
S = 250,
prop=0.1, N=50)
warnings()
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1.5,1,1), data = rlogis(10),
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0,0),
lim_sup = c(2,2,2),
S = 250,
prop=0.1, N=50)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1.5,0,1), data = rlogis(10),
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0,0),
lim_sup = c(2,2,2),
S = 250,
prop=0.1, N=50)
pdf_logis <- function(par,x){
loc = par[1]
sc = par[2]
pdf <- dlogis(x,loc,sc)
pdf
}
cdf_logis <- function(par,x){
loc = par[1]
sc = par[2]
cdf <- plogis(x,loc,sc)
cdf
}
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1,1), data = rlogis(10),
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0),
lim_sup = c(2,2),
S = 250,
prop=0.1, N=50)
warnings()
x <- rlogis(10,0,1.5)
set.seed(9)
x <- rlogis(10,0,1.5)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1,1), data = x,
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0),
lim_sup = c(2,2),
S = 250,
prop=0.1, N=50)
fit1$mle
pdf_weibull <- function(par,x){
a = par[1]
b = par[2]
dweibull(x, shape = a, scale = b)
}
cdf_weibull <- function(par,x){
a = par[1]
b = par[2]
pweibull(x, shape = a, scale = b)
}
set.seed(0)
random_data2 = rweibull(250,2,2)
result_2 = goodness.fit(pdf = pdf_weibull, cdf = cdf_weibull, starts = c(1,1), data = random_data2,
method = "PSO", domain = c(0,Inf), mle = NULL, lim_inf = c(0,0), lim_sup = c(10,10),
N = 100, S = 250)
x = seq(0,ceiling(max(random_data2)), length.out = 500)
hist(random_data2, probability = TRUE)
lines(x, pdf_weibull(par = result_2$mle, x), col = "blue")
result_2$mle
pdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
pdf <- 0
if((alpha > 0) & (alpha != 1)){
pdf <- (log(alpha)/(alpha - 1)) * dlogis(x,loc,sc) * alpha ^plogis(x,loc,sc)
} else if (alpha == 1){
pdf = dlogis(x,loc,sc)
}
pdf
}
cdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
cdf <- 0
if((alpha > 0) & (alpha != 1)){
cdf <-  (alpha ^plogis(x,loc,sc)   - 1 )/ (alpha - 1))
pdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
pdf <- 0
if((alpha > 0) & (alpha != 1)){
pdf <- (log(alpha)/(alpha - 1)) * dlogis(x,loc,sc) * alpha ^plogis(x,loc,sc)
} else if (alpha == 1){
pdf = dlogis(x,loc,sc)
}
pdf
}
cdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
cdf <- 0
if((alpha > 0) & (alpha != 1)){
cdf <-  (alpha ^plogis(x,loc,sc)   - 1 )/ (alpha - 1))
pdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
pdf <- 0
if((alpha > 0) & (alpha != 1)){
pdf <- (log(alpha)/(alpha - 1)) * dlogis(x,loc,sc) * alpha ^plogis(x,loc,sc)
} else if (alpha == 1){
pdf = dlogis(x,loc,sc)
}
pdf
}
cdf_logis <- function(par,x){
alpha = par[1]
loc = par[2]
sc = par[3]
cdf <- 0
if((alpha > 0) & (alpha != 1)){
cdf <-  (alpha ^plogis(x,loc,sc)   - 1 )/ (alpha - 1)
} else if (alpha == 1){
cdf = plogis(x,loc,sc)
}
cdf
}
x = rlogis(10)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1.5,1,1), data = x,
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0,0),
lim_sup = c(2,2,2),
S = 250,
prop=0.1, N=50)
hist(x)
fit1$mle
set.seed(9)
x = rlogis(1000)
fit1 = AdequacyModel::goodness.fit(pdf = pdf_logis, cdf = cdf_logis,
starts = c(1.5,1,1), data = x,
method = "PSO",
domain = c(0,Inf),
mle = NULL, lim_inf = c(0,0,0),
lim_sup = c(2,2,2),
S = 250,
prop=0.1, N=50)
fit1$mle
x <- c(1,2,3,4,5)
y <- c(5,4,3,2,1)
z <- x + y
print(z)
y <- c(5,4,3,2,1,5,4,3)
z <- x + y
print(z)
y <- c(5,4,3,2,1,1,1,1)
z <- x + y
print(z)
z <- x * y
print(z)
C(1,2,3,4)
c(1,2,3,4)
x = c(1,2,3,4)
length(x)
LEGNTH(x)
seq(1,10)
x = seq(1,10)
x == 5
1*(x == 5)
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
1+77+22
1=2345678991011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
eegffghjkl;';lkjhgffghjkl;'ghjkl;'?.,mnbvfdfghjkl;'
';loiuy6t543334567890p[][poiuytrfghjkl;/?.,mnbvfcdfghjkl;'
';lkjhgfghjkl;';lkjhgfr56789opokjbvgty7u8iolkjhgtyuiop[]
\';lkjhgfdse4567890-[]\'
'[;pljuhgfghjkl;'
?.,mn bhghjkl;''
';lkjhyuiop[]\'
150000/100
8,718.12*112
8718.12*112
396.95*100
1=
1234567891011121314151617181920
1+2
85+100
1234567890134565434565534521234556
234543211111111111111111234565434567654567867876567876789878987676789876
install.packages("gapminder")
gapminder::gapminder
write.csv(gapminder::gapminder, "gapminder.csv")
getwd()
install.packages("gapminder")
library(gapminder)
gapminder::gapminder
getwd()
setwd("C:/Users/bpkin/OneDrive/Documents/PowerBI/datasets-power-bi-training/datasets")
getwd(0)
getwd()
gapminder::gapminder
write.csv(gapminder::gapminder, "gapminder_data.csv", row.names = FALSE)
